pipeline {
    agent any

    environment {
        //FPT_ACR_CREDENTIALS = credentials('ECR-ACCESS-KEY')
        //FPT_ACR_URL = "563958919552.dkr.ecr.ap-northeast-2.amazonaws.com/testecr"
        //FPT_ACR_NAME = "testecr"
        //REGION = "ap-northeast-2"
        COMMIT_HASH = sh(script: 'git rev-parse --short  HEAD', returnStdout: true).trim()
        SERVICE_NAME = "java"
        AKS_CLUSTER_NAME = "fpt-ams-dev"
    }

    stages {
        
         stage('Test') {
            steps {
                script{
                sh "mvn clean test"   
                }
            }
         }
         stage("build image") {
             steps {
                 sh "docker build -t hello-java:${COMMIT_HASH}_$BUILD_NUMBER -f Dockerfile ."
                 sh "docker tag hello-java:${COMMIT_HASH}_$BUILD_NUMBER hello-java:latest" 
             }
         }    
    //     stage("push Image") {
    //         steps {
    //            sh "docker push $FPT_ACR_URL:${COMMIT_HASH}_$BUILD_NUMBER"
    //             script {
    //      try {
    //          sh 'aws ecr batch-delete-image --repository-name testecr --image-ids imageTag=latest'
    //      } catch (Exception e) {
    //          println "ACR remove execution FAILED: ${e.getMessage()} --> SKIP Remove ACR"
    //          currentBuild.result = 'SUCCESS'
    //      }
    //   }
    //             sh "docker push $FPT_ACR_URL:latest"             
    //         }
    //     }
        
        stage("Deploy to aks") {
            steps {
                //sh('kubectl config use-context $AKS_CLUSTER_NAME')
                sh('kubectl apply -f deployment_java.yml')
                sh('kubectl apply -f service-java.yml')
            }
        }
}
      
            post {
                always {
                   //sh 'docker rmi $FPT_ACR_URL:${COMMIT_HASH}_$BUILD_NUMBER '
                   sh 'docker images'               
                }
            }
        
}
